import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:untitled3/Screens/Menu/GeneralSettings.dart';
import 'package:untitled3/Screens/Menu/SyncToCloud.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale? _locale;
  static bool _shouldReload = false;
  static Locale? get locale => _locale;
  static set locale(Locale? newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback? onLocaleChanged;

  static I18n? of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "Home"
	String get homeScreenName => "Home";
	/// "Menu"
	String get menuScreenName => "Menu";
	/// "Notes"
	String get notesScreenName => "Notes";
	/// "Notifications"
	String get notificationsScreenName => "Notifications";
	/// "Setting"
	String get settingScreenName => "Setting";
	/// "Calendar"
	String get calendarScreenName => "Calendar";
	/// "Mic"
	String get micButton => "Mic";
	/// "Press to Record"
	String get pressToRecord => "Press to Record";
	// "HelpScreen"
	String get HelpScreen => "Help";
	/// "Trigger"
	String get TriggerScreen => "Trigger";
	/// "Sync to Cloud"
	String get SyncToCloudScreen => "Sync to Cloud";
	/// "General Settings"
	String get GeneralSettingsScreen => "General Settings";



}
class _I18n_en_US extends I18n {
  const _I18n_en_US();
}
class _I18n_ar_SY extends I18n {
  const _I18n_ar_SY();
  @override
  TextDirection get textDirection => TextDirection.rtl;
	/// "الصفحة الرئيسية"
	@override
	String get homeScreenName => "الصفحة الرئيسية";
	/// "الصفحة القائمة"
	@override
	String get menuScreenName => "الصفحة القائمة";
	/// "صفحة المسودات"
	@override
	String get notesScreenName => "صفحة المسودات";
	/// "صفحة الإشعارات"
	@override
	String get notificationsScreenName => "صفحة الإشعارات";
	/// "صفحة الإعدادات"
	@override
	String get settingScreenName => "صفحة الإعدادات";
	/// "صفحة التقويم"
	@override
	String get calendarScreenName => "صفحة التقويم";
	/// "ميكروفون"
	@override
	String get micButton => "ميكروفون";
	/// "اضغط للتسجيل"
	@override
	String get pressToRecord => "اضغط للتسجيل";
	/// "مساعدة"
	@override
	String get HelpScreen => "مساعدة";
	/// "مشغل"
	@override
	String get TriggerScreen => "مشغل";
	/// "مزامنة مع السحابة"
	@override
	String get SyncToCloudScreen => "مزامنة مع السحابة";
	/// "الاعدادات العامة"
	@override
	String get GeneralSettingsScreen => "الاعدادات العامة";
}
class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "家"
	@override
	String get homeScreenName => "家";
	/// "菜单"
	@override
	String get menuScreenName => "菜单";
	/// "笔记"
	@override
	String get notesScreenName => "笔记";
	/// "通知"
	@override
	String get notificationsScreenName => "通知";
	/// "环境"
	@override
	String get settingScreenName => "环境";
	/// "日历"
	@override
	String get calendarScreenName => "日历";
	/// "麦克风"
	@override
	String get micButton => "麦克风";
	/// "按录制"
	@override
	String get pressToRecord => "按录制";
	/// "幫助"
	@override
	String get HelpScreen => "幫助";
	/// "扳機"
	@override
	String get TriggerScreen => "扳機";
	/// "同步到雲端"
	@override
	String get SyncToCloudScreen => "同步到雲端";
	/// "通用設置"
	@override
	String get GeneralSettingsScreen => "通用設置";
}
class _I18n_pt_BR extends I18n {
  const _I18n_pt_BR();
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "Casa"
	@override
	String get homeScreenName => "Casa";
	/// "Cardápio"
	@override
	String get menuScreenName => "Cardápio";
	/// "Notas"
	@override
	String get notesScreenName => "Notas";
	/// "Notificações"
	@override
	String get notificationsScreenName => "Notificações";
	/// "Configuração"
	@override
	String get settingScreenName => "Configuração";
	/// "Calendário"
	@override
	String get calendarScreenName => "Calendário";
	/// "Microfone"
	@override
	String get micButton => "Microfone";
	/// "Pressione para gravar"
	@override
	String get pressToRecord => "Pressione para gravar";
	/// "Ajuda"
	@override
	String get HelpScreen => "Ajuda";
	/// "Desencadear"
	@override
	String get TriggerScreen => "Desencadear";
	/// "Sincronizar com a nuvem"
	@override
	String get SyncToCloudScreen => "Sincronizar com a nuvem";
	/// "Configurações Gerais"
	@override
	String get GeneralSettingsScreen => "Configurações Gerais";
}
class _I18n_es_US extends I18n {
  const _I18n_es_US();
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "Inicio"
	@override
	String get homeScreenName => "Inicio";
	/// "Menú"
	@override
	String get menuScreenName => "Menú";
	/// "Notas"
	@override
	String get notesScreenName => "Notas";
	/// "Notificaciones"
	@override
	String get notificationsScreenName => "Notificaciones";
	/// "Configuración"
	@override
	String get settingScreenName => "Configuración";
	/// "Calendario"
	@override
	String get calendarScreenName => "Calendario";
	/// "Micrófono"
	@override
	String get micButton => "Micrófono";
	/// "Presione para grabar"
	@override
	String get pressToRecord => "Presione para grabar";
	/// "Ayudar"
	@override
	String get HelpScreen => "Ayudar";
	/// "Desencadenar"
	@override
	String get TriggerScreen => "Desencadenar";
	///"Sincronizar con la nube"
	@override
	String get SyncToCloudScreen => "Sincronizar con la nube";
	///"Configuración general"
	@override
	String get GeneralSettingsScreen => "Configuración general";
}
class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
			Locale("ar", "SY"),
			Locale("es", "US"),
			Locale("pt", "BR"),
			Locale("zh", "CN")
    ];
  }

  LocaleResolutionCallback resolution({Locale? fallback}) {
    return (Locale? locale, Iterable<Locale> supported) {
      if (locale != null && isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale!.languageCode : "";
    if ("en_US" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
		}
		else if ("ar_SY" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_ar_SY());
		}
		else if ("es_US" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_US());
		}
		else if ("pt_BR" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
		}
		else if ("zh_CN" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
		}
    else if ("en" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
		}
		else if ("ar" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_ar_SY());
		}
		else if ("es" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_US());
		}
		else if ("pt" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
		}
		else if ("zh" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
		}

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length ; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}
